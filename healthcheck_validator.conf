lua_shared_dict health_cache 1m;
limit_req_zone $binary_remote_addr zone=health_limit:10m rate=5r/s;

server {
    listen 8089;
    server_name _;

    location /health {
        limit_req zone=health_limit burst=10 nodelay;

        if ($request_method != GET) {
            return 405;
        }

        if ($http_user_agent = "") {
            return 403;
        }

        content_by_lua_block {
            local addr = ("<YOUR_VALIDATOR_ADDRESS>"):lower()

            local http = require "resty.http"
            local cjson = require "cjson"

            -- Check cache
            local cache = ngx.shared.health_cache
            local cached_response = cache:get("health_result")
            if cached_response then
                ngx.say(cached_response)
                return
            end

            local httpc = http.new()
            httpc:set_timeout(30000) -- 30 second

            local res, err = httpc:request_uri("http://127.0.0.1:8080", {
                method = "POST",
                body = '{"method": "node_getValidatorsStats"}',
                headers = { ["Content-Type"] = "application/json" }
            })

            if not res then
                ngx.status = 502
                ngx.say("backend error")
                return
            end

            local ok, data = pcall(cjson.decode, res.body)
            if not ok or not data.result or not data.result.stats then
                ngx.status = 500
                ngx.say("invalid backend response")
                return
            end

            local stats = data.result.stats[addr]
            if not stats or not stats.missedAttestations then
                ngx.status = 500
                ngx.say("data missing")
                return
            end

            local rate = stats.missedAttestations.rate
            if rate == nil then
                local count = stats.missedAttestations.count
                if count == nil or count ~= 0 then
                    ngx.status = 500
                    ngx.say("data missing")
                    return
                else
                    rate = 0
                end
            end

            local result

            if rate > 0.8 then
                ngx.status = 503
                result = "rate too high: " .. rate
            else
                ngx.status = 200
                result = "OK"
            end

            cache:set("health_result", result, 59)  -- cache for 59 seconds
            ngx.say(result)
        }
    }
}
